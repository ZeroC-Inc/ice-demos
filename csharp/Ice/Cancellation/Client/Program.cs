// Copyright (c) ZeroC, Inc.

// Slice module VisitorCenter in Greeter.ice maps to C# namespace VisitorCenter.
using VisitorCenter;

// Create an Ice communicator to initialize the Ice runtime. The communicator is disposed before the program exits.
using Ice.Communicator communicator = Ice.Util.initialize(ref args);

// GreeterPrx is a class generated by the Slice compiler. We create a proxy from a communicator and a "stringified
// proxy" with the address of the target object.
// If you run the server on a different computer, replace localhost in the string below with the server's hostname
// or IP address.
GreeterPrx greeter = GreeterPrxHelper.createProxy(communicator, "greeter:tcp -h localhost -p 4061");

// Reduce the invocation timeout on this proxy to 4 seconds (the default is 60 seconds).
greeter = GreeterPrxHelper.uncheckedCast(greeter.ice_invocationTimeout(4_000)); // in milliseconds

// Get a proxy to the admin facet of the Greeter object.
GreeterAdminPrx greeterAdmin = GreeterAdminPrxHelper.uncheckedCast(greeter.ice_facet("admin"));

// Send a request to the remote object and get the response.
string greeting = await greeter.GreetAsync(Environment.UserName);
Console.WriteLine(greeting);

// Pause the greeter.
await greeterAdmin.PauseAsync();

// Verify that a new request fails with an InvocationTimeoutException.
try
{
    greeting = await greeter.GreetAsync("alice");
    Console.WriteLine($"Received unexpected greeting: {greeting}");
}
catch (Ice.InvocationTimeoutException exception)
{
    Console.WriteLine($"Caught InvocationTimeoutException, as expected: {exception.Message}");
}

// Resume the greeter and verify it still works.
await greeterAdmin.ResumeAsync();
greeting = await greeter.GreetAsync("bob");
Console.WriteLine(greeting);

// Pause the greeter again and verify we can cancel the request via its cancellation token.
await greeterAdmin.PauseAsync();

using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(2));

try
{
    greeting = await greeter.GreetAsync("carol", cancel: cts.Token);
    Console.WriteLine($"Received unexpected greeting: {greeting}");
}
catch (Ice.InvocationCanceledException exception)
{
    Console.WriteLine($"Caught InvocationCanceledException, as expected: {exception.Message}");
}

// Resume the greeter and verify it still works.
await greeterAdmin.ResumeAsync();
greeting = await greeter.GreetAsync("dave");
Console.WriteLine(greeting);
